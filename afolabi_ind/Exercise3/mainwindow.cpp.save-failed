#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    // standard call to setup Qt UI (same as previously)
    ui->setupUi( this );

	ui->qvtkWidget->SetRenderWindow( renderWindow );

    // Create a renderer, and render window
	ui->qvtkWidget->GetRenderWindow()->AddRenderer( renderer );									// ###### ask the QtVTKOpenGLWidget for its renderWindow ######
	renderer->SetBackground( colors->GetColor3d("Silver").GetData() );


	// Connect the released() signal of the renderCube object to the handleRenderCube slot in this object
	connect( ui->renderCube, &QPushButton::released, this, &MainWindow::handleRenderCube );

	// Connect the released() signal of the renderPyramid object to the handleRenderPyramid slot in this object
	connect( ui->renderPyramid, &QPushButton::released, this, &MainWindow::handleRenderPyramid );

    // Connect the released() signal of the changeModelColor object to the handleChangeModelColor slot in this object
	connect( ui->changeModelColor, &QPushButton::released, this, &MainWindow::handleChangeModelColor );

    // Connect the released() signal of the changeBackgroundColor object to the handleChangeBackgroundColor slot in this object
	connect( ui->changeBackgroundColor, &QPushButton::released, this, &MainWindow::handleChangeBackgroundColor );
}

MainWindow::~MainWindow()
{
    delete ui;
}

// Slot implementation in mainwindow.cpp---------------------

void MainWindow::handleRenderCube() {

    // Link the QtVTK widget with a VTK render window
	ui->qvtkWidget->SetRenderWindow( renderWindow );

	mapper->SetInputConnection( cubeSource->GetOutputPort() );

	actor->SetMapper(mapper);

	actor->GetProperty()->EdgeVisibilityOn();

	actor->GetProperty()->SetColor( colors->GetColor3d("Red").GetData() );

	ui->qvtkWidget->GetRenderWindow()->AddRenderer( renderer );									// ###### ask the QtVTKOpenGLWidget for its renderWindow ######

	// Add the actor to the scene
	renderer->AddActor(actor);
	renderer->SetBackground( colors->GetColor3d("Silver").GetData() );

	// Setup the renderers's camera
	renderer->ResetCamera();
	renderer->GetActiveCamera()->Azimuth(30);
	renderer->GetActiveCamera()->Elevation(30);
	renderer->ResetCameraClippingRange();
    ui->qvtkWidget->GetRenderWindow()->Render();									// ###### ask the QtVTKOpenGLWidget for its renderWindow ######
}

void MainWindow::handleRenderPyramid() {

    vtkSmartPointer<vtkPoints> points = vtkSmartPointer<vtkPoints>::New();
	vtkSmartPointer<vtkPyramid> pyramid = vtkSmartPointer<vtkPyramid>::New();
	vtkSmartPointer<vtkCellArray> cells = vtkSmartPointer<vtkCellArray>::New();
	vtkSmartPointer<vtkUnstructuredGrid> ug = vtkSmartPointer<vtkUnstructuredGrid>::New();

    // Link the QtVTK widget with a VTK render window
	ui->qvtkWidget->SetRenderWindow( renderWindow );

	// Setup Pyramid Model
    float p0[3] = {1.0, 1.0, 1.0};
    float p1[3] = {-1.0, 1.0, 1.0};
    float p2[3] = {-1.0, -1.0, 1.0};
    float p3[3] = {1.0, -1.0, 1.0};
    float p4[3] = {0.0, 0.0, 0.0};

    points->InsertNextPoint(p0);
    points->InsertNextPoint(p1);
    points->InsertNextPoint(p2);
    points->InsertNextPoint(p3);
    points->InsertNextPoint(p4);

    pyramid->GetPointIds()->SetId(0, 0);
    pyramid->GetPointIds()->SetId(1, 1);
    pyramid->GetPointIds()->SetId(2, 2);
    pyramid->GetPointIds()->SetId(3, 3);
    pyramid->GetPointIds()->SetId(4, 4);

    cells->InsertNextCell(pyramid);

    ug->SetPoints(points);
    ug->InsertNextCell(pyramid->GetCellType(), pyramid->GetPointIds());
    mapper->SetInputData(ug);

	// Create an actor that is used to set the pyramid's properties for rendering and place it in the window
	actor->SetMapper(mapper);
	actor->GetProperty()->EdgeVisibilityOn();
	actor->GetProperty()->SetColor( colors->GetColor3d("Red").GetData() );

	// Link the QtVTK widget with a renderer, and render window
	ui->qvtkWidget->GetRenderWindow()->AddRenderer( renderer );									// ###### ask the QtVTKOpenGLWidget for its renderWindow ######

	// Add the actor to the scene
	renderer->AddActor(actor);
	renderer->SetBackground( colors->GetColor3d("Silver").GetData() );

	// Setup the renderers's camera
	renderer->ResetCamera();
	renderer->GetActiveCamera()->Azimuth(30);
	renderer->GetActiveCamera()->Elevation(30);
	renderer->ResetCameraClippingRange();
	ui->qvtkWidget->GetRenderWindow()->Render(); // Load Model Instantly
}

void MainWindow::handleChangeModelColor() {
//    QColorDialog dialog;
//
//    connect(&dialog, &QColorDialog::colorSelected, [](auto& color){
//            qDebug() << "# Select Model Color: " << color;
//            });
//    dialog.exec();

	QColor color = QColorDialog::getColor(Qt::red,this);
	if(color.isValid())
    {
        actor->GetProperty()->SetColor( color );
    }

    ui->qvtkWidget->GetRenderWindow()->Render(); // Load Model Instantly
}

void MainWindow::handleChangeBackgroundColor()
{
//    QColorDialog dialog;
//
//    connect(&dialog, &QColorDialog::colorSelected, [](auto& color){
//            qDebug() << "# Select Background Color: " << color;
//            });
//    dialog.exec();

//    vtkActorCollection* vtkRenderer::GetActors()
//    {
//
//    }

//    QPalette palette;
//    palette.setColor(QPalette::Base,color);
//    if(color.isValid()){
//        ui->textEdit->setPalette(palette);
//    }

    QColor color = QColorDialog::getColor(Qt::red,this);
	if(color.isValid())
    {
        renderer->SetBackground( colors->GetColor3d("Black").GetData() );
    }

    ui->qvtkWidget->GetRenderWindow()->Render(); // Load Model Instantly
}

/// Clip Filter
void MainWindow::on_clipFilter_stateChanged(int amp)
{
    if(ui->clipFilter->isChecked())
    {
        planeLeft->SetOrigin(0.0, 0.0, 0.0);
        planeLeft->SetNormal(-1.0, 0.0, 0.0);

        clipFilter->SetInputConnection( reader->GetOutputPort() ) ;
        clipFilter->SetClipFunction( planeLeft.Get() );

        mapper->SetInputConnection( clipFilter->GetOutputPort() );
    }
    else
    {
        mapper->SetInputConnection( reader->GetOutputPort() );
    }

    /// Couldn't Clip "cubeSource"
    //  clipFilter->SetInputConnection( cubeSource->GetOutputPort() ) ;

    ui->qvtkWidget->GetRenderWindow()->Render();    // Load Model Instantly
}

/// Shrink Filter
void MainWindow::on_shrinkFilter_stateChanged(int amp)
{
    if(ui->shrinkFilter->isChecked())
    {
        shrinkFilter->SetInputConnection(reader->GetOutputPort());
        shrinkFilter->SetShrinkFactor(.8);
        shrinkFilter->Update();

        mapper->SetInputConnection( shrinkFilter->GetOutputPort() );
    }
    else
    {
        shrinkFilter->SetInputConnection(reader->GetOutputPort());
        shrinkFilter->SetShrinkFactor(1);
        shrinkFilter->Update();

        mapper->SetInputConnection( shrinkFilter->GetOutputPort() );
    }

    /// Couldn't Shrink "cubeSource"
    //  shrinkFilter->SetInputConnection(cubeSource->GetOutputPort());

    ui->qvtkWidget->GetRenderWindow()->Render();    // Load Model Instantly
}

// https://kitware.github.io/vtk-examples/site/Cxx/IO/ReadSTL/
void MainWindow::on_actionFileOpen_triggered()
{
    QString fileName = QFileDialog::getOpenFileName(this, tr("Open STL File"), "./", tr("STL Files (*.stl)"));

    // const char *c_str = fileName.toLatin1().data();

    // https://www.cnblogs.com/wxl845235800/p/10796840.html
    QByteArray fileSTL = fileName.toLatin1();
    const char *c_str = fileSTL.data();

    reader->SetFileName(c_str);

    reader->Update();

    // Create a mapper that will hold the cube's geometry in a format suitable for rendering
	mapper->SetInputConnection( reader->GetOutputPort() );

	// Create an actor that is used to set the cube's properties for rendering and place it in the window
	actor->SetMapper(mapper);
	actor->GetProperty()->EdgeVisibilityOn();

	actor->GetProperty()->SetColor( colors->GetColor3d("Red").GetData() );

	// Create a renderer, and render window
    vtkNew<vtkRenderWindow> renderWindow;
	ui->qvtkWidget->GetRenderWindow()->AddRenderer( renderer );									// ###### ask the QtVTKOpenGLWidget for its renderWindow ######

	// Add the actor to the scene
	renderer->AddActor(actor);
	renderer->SetBackground( colors->GetColor3d("Silver").GetData() );

	// Setup the renderers's camera
	renderer->ResetCamera();
	renderer->GetActiveCamera()->Azimuth(30);
	renderer->GetActiveCamera()->Elevation(30);
	renderer->ResetCameraClippingRange();
	ui->qvtkWidget->GetRenderWindow()->Render();
	renderWindow->Render();
}

/// How to build .exe in Visual Studio?, press .exe icon and launch

/// How does checkbox work? state,clicked,pressed,if,else?
    // Shrink Filter
    // Clip Filter

/// How to access model & background colors actors, pointer,global?
    // Change Background Color Dialog
    // Change Model Color Dialog
